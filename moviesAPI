const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'moviesData.db')

let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()
// get movi list
app.get('/movies/', async (request, response) => {
  const moviesQuery = `
  select movie_name from  movie;
  `
  const moviList = await db.all(moviesQuery)

  response.send(moviList.map(eachMovie => ({movieName: eachMovie.movie_name})))
})
// post movie
app.post('/movies/', async (request, response) => {
  const moviDetails = request.body
  const {directorId, movieName, leadActor} = moviDetails

  const postQuery = `
   INSERT INTO movie (director_id, movie_name, lead_actor)
      VALUES (
        ${directorId},
        '${movieName}',
        '${leadActor}'
      )`
  const moviAdd = await db.run(postQuery)
  response.send('Movie Successfully Added')
})
// get movie
app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const singlemovie = `select * from movie where 
  movie_id =${movieId};`
  const getMovi = await db.get(singlemovie)
  response.send(getMovi)
})
// put method
app.put('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const updatedmovi = request.body
  const {directorId, movieName, leadActor} = updatedmovi

  const putQuery = `
update movie set 
director_id = ${directorId}, 
movie_name = '${movieName}',
lead_actor = '${leadActor}'
where movie_id = ${movieId};
`
  const updated = await db.run(putQuery)
  response.send('Movie Details Updated')
})
// delete
app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const deleteQuery = ` 
delete from movie where movie_id = ${movieId};`
  const deletMovie = await db.run(deleteQuery)
  response.send('Movie Removed')
})
// get director
app.get('/directors/', async (request, response) => {
  const getDirector = `
  select director_name from director;`
  const directorQuery = await db.all(getDirector)
  response.send(directorQuery.map(each => ({directorName: each.director_name})))
})
module.exports = app
